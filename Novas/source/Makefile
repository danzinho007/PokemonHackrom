ifeq ($(strip $(shell echo $$CC)),)
CC := gcc
endif
ifeq ($(strip $(shell echo $$PYTHON)),)
PYTHON := python3
endif
MD5 := md5sum -c --quiet
CFLAGS := -O3 -march=native -mtune=native

.SUFFIXES:
.PHONY: all clean clean_old prism lzcomp freespace baserom.gbc
.SECONDEXPANSION:
.SECONDARY:

gfx       := $(PYTHON) gfx.py
includes  := $(PYTHON) utils/scan_includes.py
map2sym   := $(PYTHON) utils/map2sym.py
EXE :=
LZ       := utils/lzcomp${EXE}
TEXTCOMP := utils/textcomp${EXE}
BSPCOMP  := utils/bspcomp${EXE}
IPSPATCH := utils/ipspatch${EXE}
XORBANKS := utils/xorbanks${EXE}
GBSTRIM  := utils/gbstrim${EXE}
GBSPATCH := utils/gbspatch${EXE}
BANKENDS := utils/bankends${EXE}
QRCONV   := utils/qrconv${EXE}
COLL2BIN := utils/coll2bin.sh
RGBDS    :=
RGBASM   := ${RGBDS}rgbasm
RGBLINK  := ${RGBDS}rgblink
RGBFIX   := ${RGBDS}rgbfix

ifdef BUILD_DATE
BUILD_DATE_FLAG := -DBUILD_DATE=${BUILD_DATE}
else
BUILD_DATE_FLAG :=
endif

ASMFLAGS := ${BUILD_DATE_FLAG} -h -L

prism_obj := \
wram.o \
main.o \
audio.o \
maps.o \
text.o \
gfx.o

prism_nodebug_obj := $(prism_obj:.o=_nodebug.o)

gbs_obj := \
wram.o \
gbs.o

roms := pokeprism.gbc
all_roms := pokeprism.gbc pokeprism_nodebug.gbc
patch_components := patch/_xorpatch.bin patch/_debug.ips patch/_release.ips patch/_hashes.txt patch/_version.txt patch/_gbspatch.bin
generated_extensions := lz tmp 1bpp o ded

all: freespace nodebug gbs

prism: pokeprism.gbc contents/contents.link
nodebug: pokeprism_nodebug.gbc contents/contents.link
lzcomp: ${LZ}
textcomp: ${TEXTCOMP}
bspcomp: ${BSPCOMP}
ipspatch: ${IPSPATCH}
xorbanks: ${XORBANKS}
gbspatch: ${GBSPATCH}
gbs: pokeprism.gbs

freespace: contents/bank_ends.txt

${LZ}:
	${MAKE} -C utils/lz
	cp utils/lz/lzcomp ${LZ}

${TEXTCOMP}: utils/textcomp.c
	${CC} ${CFLAGS} $< -o $@

${BSPCOMP}: utils/bsp/bspcomp.c
	${CC} ${CFLAGS} $< -o $@

${IPSPATCH}: utils/ipspatch.c
	${CC} ${CFLAGS} $< -o $@

${XORBANKS}: utils/xorbanks.c
	${CC} ${CFLAGS} $< -o $@

${GBSTRIM}: utils/gbstrim.c
	${CC} ${CFLAGS} $< -o $@

# not easy to use $@ here
utils/parsemap.o: utils/parsemap.c utils/parsemap.h
	cd utils && ${CC} ${CFLAGS} -c parsemap.c

utils/libqrgen.o: utils/libqrgen.c utils/libqrgen.h
	cd utils && ${CC} ${CFLAGS} -c libqrgen.c

${BANKENDS}: utils/bankends.c utils/parsemap.o
	${CC} ${CFLAGS} $^ -o $@

${GBSPATCH}: utils/gbspatch.c utils/parsemap.o
	${CC} ${CFLAGS} $^ -o $@

${QRCONV}: utils/qrconv.c utils/libqrgen.o
	${CC} ${CFLAGS} $^ -o $@

# delete files generated by older versions of this Makefile that are no longer needed
clean_old:
	rm -f pokeprism00.*

clean: clean_old
	rm -f $(all_roms) $(all_roms:.gbc=.map) $(all_roms:.gbc=.sym)
	rm -f ${gbs_obj}
	rm -f $(LZ) ${TEXTCOMP} ${IPSPATCH} ${BSPCOMP} ${XORBANKS} ${GBSTRIM} ${BANKENDS} ${QRCONV}
	rm -f pokeprism.bsp pokeprism.gbs ${patch_components}
	for ext in ${generated_extensions}; do find . -name "*.$$ext" -delete; done
	find . -name __pycache__ -exec rm -rf {} +
	make -C utils/lz clean

patch: pokeprism.bsp

baserom.gbc:
	[ $(shell sha1sum -b $@ | cut -c 1-40) = f2f52230b536214ef7c9924f483392993e226cfb ]

patch/_hashes.txt: all
	printf "\\thexdata %s\\n" `sha1sum -b pokeprism_nodebug.gbc | cut -c 1-40` > $@
	printf "\\thexdata %s\\n" `sha1sum -b pokeprism.gbc | cut -c 1-40` >> $@
	printf "\\thexdata %s\\n" `sha1sum -b pokeprism.gbs | cut -c 1-40` >> $@

patch/_version.txt: pokeprism.gbc
	hexdump -s 252 -n 4 -v -e '"\t" "hexdata " 4/1 "%02x" "\n"' pokeprism.gbc > $@

patch/_debug.ips: all prism ${IPSPATCH}
	${IPSPATCH} create pokeprism_nodebug.gbc pokeprism.gbc $@

patch/_release.ips: all prism ${IPSPATCH}
	${IPSPATCH} create pokeprism.gbc pokeprism_nodebug.gbc $@

patch/_xorpatch.bin: all baserom.gbc ${XORBANKS}
	${XORBANKS} baserom.gbc pokeprism_nodebug.gbc $@

patch/_gbspatch.bin: all ${IPSPATCH} ${GBSPATCH}
	${GBSPATCH} pokeprism_nodebug.gbc pokeprism_nodebug.map pokeprism.gbs gbs.map patch/_gbspatch.tmp patch/_gbsresult.tmp
	${IPSPATCH} create patch/_gbsresult.tmp pokeprism.gbs patch/_gbsips.tmp
	cat patch/_gbspatch.tmp patch/_gbsips.tmp > $@
	rm -f patch/_gbspatch.tmp patch/_gbsresult.tmp patch/_gbsips.tmp

pokeprism.bsp: ${BSPCOMP} ${patch_components}
	cd patch && ../${BSPCOMP} patch.txt ../$@

%.asm: ;

%.o: dep = $(shell $(includes) $(@D)/$*.asm)
%.o: %.asm $$(dep)
	${RGBASM} -DDEBUG_MODE ${ASMFLAGS} -o $@ $<

%_nodebug.o: dep = $(shell $(includes) $(@D)/$*.asm)
%_nodebug.o: %.asm $$(dep)
	${RGBASM} ${ASMFLAGS} -o $@ $<

pokeprism.gbc: $(prism_obj) contents/*.link
	${RGBLINK} -n pokeprism.sym -m pokeprism.map -l contents/contents.link -p 0xff -o $@ ${prism_obj}
	${RGBFIX} -Cjv -i PRSM -k 01 -l 0x33 -m 0x10 -p 0xff -r 3 -t PM_PRISM $@
	$(map2sym) pokeprism.map pokeprism.sym

pokeprism_nodebug.gbc: $(prism_nodebug_obj) contents/*.link
	${RGBLINK} -n pokeprism_nodebug.sym -m pokeprism_nodebug.map -l contents/contents.link -p 0xff -o $@ ${prism_nodebug_obj}
	${RGBFIX} -Cjv -i PRSM -k 01 -l 0x33 -m 0x10 -p 0xff -r 3 -t PM_PRISM $@
	$(map2sym) pokeprism_nodebug.map pokeprism_nodebug.sym

pokeprism.gbs: $(gbs_obj) contents/gbs.link ${GBSTRIM}
	${RGBASM} -DGBS ${ASMFLAGS} -o audio_gbs.o audio.asm
	${RGBLINK} -p 0 -m gbs.map -o $@ -l contents/gbs.link ${gbs_obj} audio_gbs.o
	$(GBSTRIM) $@

%.png: ;

%.2bpp: %.png
	$(gfx) 2bpp $<

# QR 1bpp's have a special rule
gfx/qrcodes/%.1bpp: gfx/qrcodes/%.asm ${QRCONV}
	${QRCONV} $< $@

%.1bpp: %.png
	$(gfx) 1bpp $<

%.lz: % ${LZ}
	$(LZ) -- $< $@

%.txt: ;
contents/bank_ends.txt: prism ${BANKENDS}
	${BANKENDS} pokeprism.map > $@

%.wav: ;

%.ded: %.wav dedenc.py
	$(PYTHON) dedenc.py $< $@

%.pal: %.2bpp ;
gfx/pics/%/normal.pal gfx/pics/%/bitmask.asm gfx/pics/%/frames.asm: gfx/pics/%/front.2bpp ;
%.bin: ;
%.blk: ;
%.tilemap: ;

%.ctf: %.asm macros/charmap.asm ${TEXTCOMP}
	${TEXTCOMP} macros/charmap.asm $< $@

tilesets/%_collision.bin: tilesets/%_collision.asm ${BSPCOMP}
	BSPCOMP=$(BSPCOMP) $(COLL2BIN) $< $@
